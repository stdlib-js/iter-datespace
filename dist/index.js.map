{
  "version": 3,
  "sources": ["../lib/convert.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isDateObject = require( '@stdlib/assert-is-date-object' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Converts a value to a JavaScript timestamp.\n*\n* @private\n* @param {*} value - value to convert\n* @returns {(NonNegativeInteger|Error)} either a JavaScript timestamp or an error object\n*/\nfunction convert( value ) {\n\tif ( isString( value ) ) {\n\t\tvalue = Date.parse( value );\n\t\tif ( value !== value ) {\n\t\t\treturn new TypeError( format( 'invalid argument. Unable to parse date string. Value: `%s`.', value ) );\n\t\t}\n\t\treturn value;\n\t}\n\tif ( isNonNegativeInteger( value ) ) {\n\t\treturn value;\n\t}\n\tif ( isDateObject( value ) ) {\n\t\treturn value.getTime();\n\t}\n\treturn new TypeError( format( 'invalid argument. Must provide either a Date object, a JavaScript timestamp (i.e., a nonnegative integer), or a date string. Value: `%s`.', value ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = convert;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/assert-contains' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar format = require( '@stdlib/string-format' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar ceil = require( '@stdlib/math-base-special-ceil' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar convert = require( './convert.js' );\n\n\n// VARIABLES //\n\nvar DEFAULT_LENGTH = 100;\nvar DEFAULT_ROUNDING_MODE = 'floor';\nvar ROUNDING_MODES = [\n\t'floor',\n\t'ceil',\n\t'round'\n];\nvar ROUNDING_FCNS = {\n\t'floor': floor,\n\t'ceil': ceil,\n\t'round': round\n};\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced dates over a specified interval.\n*\n* @param {(NonNegativeInteger|string|Date)} start - starting date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)\n* @param {(NonNegativeInteger|string|Date)} stop - stopping date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)\n* @param {NonNegativeInteger} [N=100] - number of values\n* @param {Options} [options] - function options\n* @param {string} [options.round='floor'] - specifies how sub-millisecond times should be rounded: 'floor', 'ceil', or 'round'\n* @throws {TypeError} a numeric `start` argument must be a nonnegative integer\n* @throws {TypeError} a numeric `stop` argument must be a nonnegative integer\n* @throws {TypeError} unable to parse date string\n* @throws {TypeError} `N` argument must be a nonnegative integer\n* @throws {TypeError} `options` argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var MILLISECONDS_IN_DAY = require( '@stdlib/constants-time-milliseconds-in-day' );\n*\n* var start = new Date();\n* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );\n*\n* var v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* // ...\n*/\nfunction iterDatespace( start, stop, N, options ) {\n\tvar step;\n\tvar iter;\n\tvar opts;\n\tvar rfcn;\n\tvar FLG;\n\tvar t1;\n\tvar t2;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\tt1 = convert( start );\n\tif ( t1 instanceof Error ) {\n\t\tthrow t1;\n\t}\n\tt2 = convert( stop );\n\tif ( t2 instanceof Error ) {\n\t\tthrow t2;\n\t}\n\topts = {\n\t\t'round': DEFAULT_ROUNDING_MODE\n\t};\n\tif ( arguments.length === 3 ) {\n\t\tif ( isNonNegativeInteger( N ) ) {\n\t\t\tn = N;\n\t\t} else if ( isPlainObject( N ) ) {\n\t\t\tn = DEFAULT_LENGTH;\n\t\t\tif ( hasOwnProp( N, 'round' ) ) {\n\t\t\t\tif ( !contains( ROUNDING_MODES, N.round ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. Unrecognized rounding mode. Option: `%s`.', N.round ) );\n\t\t\t\t}\n\t\t\t\topts.round = N.round;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either a nonnegative integer or an options object. Value: `%s`.', N ) );\n\t\t}\n\t} else if ( arguments.length > 3 ) {\n\t\tif ( !isNonNegativeInteger( N ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', N ) );\n\t\t}\n\t\tn = N;\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'round' ) ) {\n\t\t\tif ( !contains( ROUNDING_MODES, options.round ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. Unrecognized rounding mode. Option: `%s`.', options.round ) );\n\t\t\t}\n\t\t\topts.round = options.round;\n\t\t}\n\t} else {\n\t\tn = DEFAULT_LENGTH;\n\t}\n\trfcn = ROUNDING_FCNS[ opts.round ];\n\td = n - 1;\n\tstep = (t2-t1) / d;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= n ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 0 ) {\n\t\t\treturn {\n\t\t\t\t'value': new Date( t1 ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\tif ( i === d ) {\n\t\t\treturn {\n\t\t\t\t'value': new Date( t2 ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': new Date( rfcn( t1+(i*step) ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDatespace( start, stop, n, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterDatespace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns evenly spaced dates over a specified interval.\n*\n* @module @stdlib/iter-datespace\n*\n* @example\n* var MILLISECONDS_IN_DAY = require( '@stdlib/constants-time-milliseconds-in-day' );\n* var iterDatespace = require( '@stdlib/iter-datespace' );\n*\n* var start = new Date();\n* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );\n*\n* var v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_convert", "__commonJSMin", "exports", "module", "isString", "isNonNegativeInteger", "isDateObject", "format", "convert", "value", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNonNegativeInteger", "isPlainObject", "hasOwnProp", "contains", "iteratorSymbol", "format", "floor", "ceil", "round", "convert", "DEFAULT_LENGTH", "DEFAULT_ROUNDING_MODE", "ROUNDING_MODES", "ROUNDING_FCNS", "iterDatespace", "start", "stop", "N", "options", "step", "iter", "opts", "rfcn", "FLG", "t1", "t2", "n", "d", "i", "next", "end", "factory", "value", "main"]
}
