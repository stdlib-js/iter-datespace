{"version":3,"file":"index.mjs","sources":["../lib/convert.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isDateObject from '@stdlib/assert-is-date-object';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Converts a value to a JavaScript timestamp.\n*\n* @private\n* @param {*} value - value to convert\n* @returns {(NonNegativeInteger|Error)} either a JavaScript timestamp or an error object\n*/\nfunction convert( value ) {\n\tif ( isString( value ) ) {\n\t\tvalue = Date.parse( value );\n\t\tif ( value !== value ) {\n\t\t\treturn new TypeError( format( '0Oh3z', value ) );\n\t\t}\n\t\treturn value;\n\t}\n\tif ( isNonNegativeInteger( value ) ) {\n\t\treturn value;\n\t}\n\tif ( isDateObject( value ) ) {\n\t\treturn value.getTime();\n\t}\n\treturn new TypeError( format( '0Oh40', value ) );\n}\n\n\n// EXPORTS //\n\nexport default convert;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/assert-contains';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport round from '@stdlib/math-base-special-round';\nimport convert from './convert.js';\n\n\n// VARIABLES //\n\nvar DEFAULT_LENGTH = 100;\nvar DEFAULT_ROUNDING_MODE = 'floor';\nvar ROUNDING_MODES = [\n\t'floor',\n\t'ceil',\n\t'round'\n];\nvar ROUNDING_FCNS = {\n\t'floor': floor,\n\t'ceil': ceil,\n\t'round': round\n};\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced dates over a specified interval.\n*\n* @param {(NonNegativeInteger|string|Date)} start - starting date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)\n* @param {(NonNegativeInteger|string|Date)} stop - stopping date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)\n* @param {NonNegativeInteger} [N=100] - number of values\n* @param {Options} [options] - function options\n* @param {string} [options.round='floor'] - specifies how sub-millisecond times should be rounded: 'floor', 'ceil', or 'round'\n* @throws {TypeError} a numeric `start` argument must be a nonnegative integer\n* @throws {TypeError} a numeric `stop` argument must be a nonnegative integer\n* @throws {TypeError} unable to parse date string\n* @throws {TypeError} `N` argument must be a nonnegative integer\n* @throws {TypeError} `options` argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* import MILLISECONDS_IN_DAY from '@stdlib/constants-time-milliseconds-in-day';\n*\n* var start = new Date();\n* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );\n*\n* var v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* // ...\n*/\nfunction iterDatespace( start, stop, N, options ) {\n\tvar step;\n\tvar iter;\n\tvar opts;\n\tvar rfcn;\n\tvar FLG;\n\tvar t1;\n\tvar t2;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\tt1 = convert( start );\n\tif ( t1 instanceof Error ) {\n\t\tthrow t1;\n\t}\n\tt2 = convert( stop );\n\tif ( t2 instanceof Error ) {\n\t\tthrow t2;\n\t}\n\topts = {\n\t\t'round': DEFAULT_ROUNDING_MODE\n\t};\n\tif ( arguments.length === 3 ) {\n\t\tif ( isNonNegativeInteger( N ) ) {\n\t\t\tn = N;\n\t\t} else if ( isPlainObject( N ) ) {\n\t\t\tn = DEFAULT_LENGTH;\n\t\t\tif ( hasOwnProp( N, 'round' ) ) {\n\t\t\t\tif ( !contains( ROUNDING_MODES, N.round ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0Oh41', N.round ) );\n\t\t\t\t}\n\t\t\t\topts.round = N.round;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError( format( '0Oh42', N ) );\n\t\t}\n\t} else if ( arguments.length > 3 ) {\n\t\tif ( !isNonNegativeInteger( N ) ) {\n\t\t\tthrow new TypeError( format( '0Oh2m', N ) );\n\t\t}\n\t\tn = N;\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0Oh43', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'round' ) ) {\n\t\t\tif ( !contains( ROUNDING_MODES, options.round ) ) {\n\t\t\t\tthrow new TypeError( format( '0Oh41', options.round ) );\n\t\t\t}\n\t\t\topts.round = options.round;\n\t\t}\n\t} else {\n\t\tn = DEFAULT_LENGTH;\n\t}\n\trfcn = ROUNDING_FCNS[ opts.round ];\n\td = n - 1;\n\tstep = (t2-t1) / d;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= n ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 0 ) {\n\t\t\treturn {\n\t\t\t\t'value': new Date( t1 ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\tif ( i === d ) {\n\t\t\treturn {\n\t\t\t\t'value': new Date( t2 ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': new Date( rfcn( t1+(i*step) ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDatespace( start, stop, n, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterDatespace;\n"],"names":["convert","value","isString","Date","parse","TypeError","format","isNonNegativeInteger","isDateObject","getTime","ROUNDING_MODES","ROUNDING_FCNS","floor","ceil","round","iterDatespace","start","stop","N","options","step","iter","opts","rfcn","FLG","t1","t2","n","d","i","Error","arguments","length","isPlainObject","hasOwnProp","contains","setReadOnly","done","iteratorSymbol"],"mappings":";;srCAqCA,SAASA,EAASC,GACjB,OAAKC,EAAUD,IACdA,EAAQE,KAAKC,MAAOH,KACLA,EACP,IAAII,UAAWC,EAAQ,QAASL,IAEjCA,EAEHM,EAAsBN,GACnBA,EAEHO,EAAcP,GACXA,EAAMQ,UAEP,IAAIJ,UAAWC,EAAQ,QAASL,GACxC,CCfA,IAEIS,EAAiB,CACpB,QACA,OACA,SAEGC,EAAgB,CACnBC,MAASA,EACTC,KAAQA,EACRC,MAASA,GAuCV,SAASC,EAAeC,EAAOC,EAAMC,EAAGC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,IADAJ,EAAKzB,EAASgB,cACKc,MAClB,MAAML,EAGP,IADAC,EAAK1B,EAASiB,cACKa,MAClB,MAAMJ,EAKP,GAHAJ,EAAO,CACNR,MArE0B,SAuED,IAArBiB,UAAUC,OACd,GAAKzB,EAAsBW,GAC1BS,EAAIT,MACE,KAAKe,EAAef,GAS1B,MAAM,IAAIb,UAAWC,EAAQ,QAASY,IAPtC,GADAS,EA5EkB,IA6EbO,EAAYhB,EAAG,SAAY,CAC/B,IAAMiB,EAAUzB,EAAgBQ,EAAEJ,OACjC,MAAM,IAAIT,UAAWC,EAAQ,QAASY,EAAEJ,QAEzCQ,EAAKR,MAAQI,EAAEJ,KACf,CAGD,MACK,GAAKiB,UAAUC,OAAS,EAAI,CAClC,IAAMzB,EAAsBW,GAC3B,MAAM,IAAIb,UAAWC,EAAQ,QAASY,IAGvC,GADAS,EAAIT,GACEe,EAAed,GACpB,MAAM,IAAId,UAAWC,EAAQ,QAASa,IAEvC,GAAKe,EAAYf,EAAS,SAAY,CACrC,IAAMgB,EAAUzB,EAAgBS,EAAQL,OACvC,MAAM,IAAIT,UAAWC,EAAQ,QAASa,EAAQL,QAE/CQ,EAAKR,MAAQK,EAAQL,KACrB,CACH,MACEa,EArGmB,IAqHpB,OAdAJ,EAAOZ,EAAeW,EAAKR,OAE3BM,GAAQM,EAAGD,IADXG,EAAID,EAAI,GAERE,GAAK,EAILO,EADAf,EAAO,CAAA,EACY,QAenB,WAEC,GADAQ,GAAK,EACAL,GAAOK,GAAKF,EAChB,MAAO,CACNU,MAAQ,GAGV,GAAW,IAANR,EACJ,MAAO,CACN5B,MAAS,IAAIE,KAAMsB,GACnBY,MAAQ,GAGV,GAAKR,IAAMD,EACV,MAAO,CACN3B,MAAS,IAAIE,KAAMuB,GACnBW,MAAQ,GAGV,MAAO,CACNpC,MAAS,IAAIE,KAAMoB,EAAME,EAAII,EAAET,IAC/BiB,MAAQ,EAET,IArCDD,EAAaf,EAAM,UA8CnB,SAAcpB,GAEb,GADAuB,GAAM,EACDO,UAAUC,OACd,MAAO,CACN/B,MAASA,EACToC,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IAtDIC,GACJF,EAAaf,EAAMiB,GA6DpB,WACC,OAAOvB,EAAeC,EAAOC,EAAMU,EAAGL,EACtC,IA7DMD,CA8DR"}