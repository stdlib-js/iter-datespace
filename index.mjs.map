{"version":3,"file":"index.mjs","sources":["../lib/convert.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isDateObject = require( '@stdlib/assert-is-date-object' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Converts a value to a JavaScript timestamp.\n*\n* @private\n* @param {*} value - value to convert\n* @returns {(NonNegativeInteger|Error)} either a JavaScript timestamp or an error object\n*/\nfunction convert( value ) {\n\tif ( isString( value ) ) {\n\t\tvalue = Date.parse( value );\n\t\tif ( value !== value ) {\n\t\t\treturn new TypeError( format( 'invalid argument. Unable to parse date string. Value: `%s`.', value ) );\n\t\t}\n\t\treturn value;\n\t}\n\tif ( isNonNegativeInteger( value ) ) {\n\t\treturn value;\n\t}\n\tif ( isDateObject( value ) ) {\n\t\treturn value.getTime();\n\t}\n\treturn new TypeError( format( 'invalid argument. Must provide either a Date object, a JavaScript timestamp (i.e., a nonnegative integer), or a date string. Value: `%s`.', value ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = convert;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/assert-contains' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar format = require( '@stdlib/string-format' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar ceil = require( '@stdlib/math-base-special-ceil' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar convert = require( './convert.js' );\n\n\n// VARIABLES //\n\nvar DEFAULT_LENGTH = 100;\nvar DEFAULT_ROUNDING_MODE = 'floor';\nvar ROUNDING_MODES = [\n\t'floor',\n\t'ceil',\n\t'round'\n];\nvar ROUNDING_FCNS = {\n\t'floor': floor,\n\t'ceil': ceil,\n\t'round': round\n};\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced dates over a specified interval.\n*\n* @param {(NonNegativeInteger|string|Date)} start - starting date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)\n* @param {(NonNegativeInteger|string|Date)} stop - stopping date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)\n* @param {NonNegativeInteger} [N=100] - number of values\n* @param {Options} [options] - function options\n* @param {string} [options.round='floor'] - specifies how sub-millisecond times should be rounded: 'floor', 'ceil', or 'round'\n* @throws {TypeError} a numeric `start` argument must be a nonnegative integer\n* @throws {TypeError} a numeric `stop` argument must be a nonnegative integer\n* @throws {TypeError} unable to parse date string\n* @throws {TypeError} `N` argument must be a nonnegative integer\n* @throws {TypeError} `options` argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var MILLISECONDS_IN_DAY = require( '@stdlib/constants-time-milliseconds-in-day' );\n*\n* var start = new Date();\n* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );\n*\n* var v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* // ...\n*/\nfunction iterDatespace( start, stop, N, options ) {\n\tvar step;\n\tvar iter;\n\tvar opts;\n\tvar rfcn;\n\tvar FLG;\n\tvar t1;\n\tvar t2;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\tt1 = convert( start );\n\tif ( t1 instanceof Error ) {\n\t\tthrow t1;\n\t}\n\tt2 = convert( stop );\n\tif ( t2 instanceof Error ) {\n\t\tthrow t2;\n\t}\n\topts = {\n\t\t'round': DEFAULT_ROUNDING_MODE\n\t};\n\tif ( arguments.length === 3 ) {\n\t\tif ( isNonNegativeInteger( N ) ) {\n\t\t\tn = N;\n\t\t} else if ( isPlainObject( N ) ) {\n\t\t\tn = DEFAULT_LENGTH;\n\t\t\tif ( hasOwnProp( N, 'round' ) ) {\n\t\t\t\tif ( !contains( ROUNDING_MODES, N.round ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. Unrecognized rounding mode. Option: `%s`.', N.round ) );\n\t\t\t\t}\n\t\t\t\topts.round = N.round;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either a nonnegative integer or an options object. Value: `%s`.', N ) );\n\t\t}\n\t} else if ( arguments.length > 3 ) {\n\t\tif ( !isNonNegativeInteger( N ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', N ) );\n\t\t}\n\t\tn = N;\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'round' ) ) {\n\t\t\tif ( !contains( ROUNDING_MODES, options.round ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. Unrecognized rounding mode. Option: `%s`.', options.round ) );\n\t\t\t}\n\t\t\topts.round = options.round;\n\t\t}\n\t} else {\n\t\tn = DEFAULT_LENGTH;\n\t}\n\trfcn = ROUNDING_FCNS[ opts.round ];\n\td = n - 1;\n\tstep = (t2-t1) / d;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= n ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 0 ) {\n\t\t\treturn {\n\t\t\t\t'value': new Date( t1 ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\tif ( i === d ) {\n\t\t\treturn {\n\t\t\t\t'value': new Date( t2 ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': new Date( rfcn( t1+(i*step) ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDatespace( start, stop, n, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterDatespace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns evenly spaced dates over a specified interval.\n*\n* @module @stdlib/iter-datespace\n*\n* @example\n* var MILLISECONDS_IN_DAY = require( '@stdlib/constants-time-milliseconds-in-day' );\n* var iterDatespace = require( '@stdlib/iter-datespace' );\n*\n* var start = new Date();\n* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );\n*\n* var v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* v = iter.next().value;\n* // returns <Date>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n"],"names":["isString","require$$0","isPrimitive","isNonNegativeInteger","require$$1","isDateObject","require$$2","format","require$$3","convert_1","value","Date","parse","TypeError","getTime","setReadOnly","isPlainObject","hasOwnProp","contains","require$$4","iteratorSymbol","require$$5","require$$6","convert","require$$10","ROUNDING_MODES","ROUNDING_FCNS","floor","require$$7","ceil","require$$8","round","require$$9","main","iterDatespace","start","stop","N","options","step","iter","opts","rfcn","FLG","t1","t2","n","d","i","Error","arguments","length","next","end","factory","done","lib"],"mappings":";;2jCAsBA,IAAIA,EAAWC,EAAsCC,YACjDC,EAAuBC,EAAmDF,YAC1EG,EAAeC,EACfC,EAASC,EAgCb,IAAAC,EApBA,SAAkBC,GACjB,OAAKV,EAAUU,IACdA,EAAQC,KAAKC,MAAOF,KACLA,EACP,IAAIG,UAAWN,EAAQ,8DAA+DG,IAEvFA,EAEHP,EAAsBO,GACnBA,EAEHL,EAAcK,GACXA,EAAMI,UAEP,IAAID,UAAWN,EAAQ,4IAA6IG,KC7BxKK,EAAcd,EACdE,EAAuBC,EAAmDF,YAC1Ec,EAAgBV,EAChBW,EAAaT,EACbU,EAAWC,EACXC,EAAiBC,EACjBd,EAASe,EAITC,EAAUC,EAOVC,EAAiB,CACpB,QACA,OACA,SAEGC,EAAgB,CACnBC,MAhBWC,EAiBXC,KAhBUC,EAiBVC,MAhBWC,GA8LZ,IAAAC,EAvIA,SAASC,EAAeC,EAAOC,EAAMC,EAAGC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,IADAJ,EAAKrB,EAASY,cACKc,MAClB,MAAML,EAGP,IADAC,EAAKtB,EAASa,cACKa,MAClB,MAAMJ,EAKP,GAHAJ,EAAO,CACNV,MArE0B,SAuED,IAArBmB,UAAUC,OACd,GAAKhD,EAAsBkC,GAC1BS,EAAIT,MACE,CAAA,IAAKrB,EAAeqB,GAS1B,MAAM,IAAIxB,UAAWN,EAAQ,2GAA4G8B,IAPzI,GADAS,EA5EkB,IA6Eb7B,EAAYoB,EAAG,SAAY,CAC/B,IAAMnB,EAAUO,EAAgBY,EAAEN,OACjC,MAAM,IAAIlB,UAAWN,EAAQ,4DAA6D8B,EAAEN,QAE7FU,EAAKV,MAAQM,EAAEN,YAKX,GAAKmB,UAAUC,OAAS,EAAI,CAClC,IAAMhD,EAAsBkC,GAC3B,MAAM,IAAIxB,UAAWN,EAAQ,+EAAgF8B,IAG9G,GADAS,EAAIT,GACErB,EAAesB,GACpB,MAAM,IAAIzB,UAAWN,EAAQ,oEAAqE+B,IAEnG,GAAKrB,EAAYqB,EAAS,SAAY,CACrC,IAAMpB,EAAUO,EAAgBa,EAAQP,OACvC,MAAM,IAAIlB,UAAWN,EAAQ,4DAA6D+B,EAAQP,QAEnGU,EAAKV,MAAQO,EAAQP,YAGtBe,EArGmB,IAqHpB,OAdAJ,EAAOhB,EAAee,EAAKV,OAE3BQ,GAAQM,EAAGD,IADXG,EAAID,EAAI,GAERE,GAAK,EAILjC,EADAyB,EAAO,GACY,OAAQY,GAC3BrC,EAAayB,EAAM,SAAUa,GAGxBjC,GACJL,EAAayB,EAAMpB,EAAgBkC,GAE7Bd,EAQP,SAASY,IAER,OADAJ,GAAK,EACAL,GAAOK,GAAKF,EACT,CACNS,MAAQ,GAGC,IAANP,EACG,CACNtC,MAAS,IAAIC,KAAMiC,GACnBW,MAAQ,GAGLP,IAAMD,EACH,CACNrC,MAAS,IAAIC,KAAMkC,GACnBU,MAAQ,GAGH,CACN7C,MAAS,IAAIC,KAAM+B,EAAME,EAAII,EAAET,IAC/BgB,MAAQ,GAWV,SAASF,EAAK3C,GAEb,OADAiC,GAAM,EACDO,UAAUC,OACP,CACNzC,MAASA,EACT6C,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOpB,EAAeC,EAAOC,EAAMU,EAAGL,KCnKxCe,EALevD"}